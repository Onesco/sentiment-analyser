name: Node CI

on:
  push:
    branches:
      - '**'

jobs:
  run-linters:
    name: Run linters
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: instal packages
        run: npm ci

      - name: run link
        run: npm run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: testing_db
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
    env:
      DB_NAME: testing_db
      DB_USERNAME: admin
      DB_PASSWORD: password
      DB_HOST: localhost
      DB_PORT: 5432
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      THRESHOLD: 0
      PUBSUB_TOPIC: summarization-completed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U admin; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done

      - name: Run database migrations
        run: npm run migration:run

      - name: Run tests
        run: npm run test


  build-app-and-push:
    name: Build Docker Image and Push to GCR
    runs-on: ubuntu-latest
    needs: test
    # if: github.ref == 'refs/heads/main'

    env:
      PROJECT_NAME: ${{ vars.PROJECT_NAME }}
      ENV_NAME: ${{ vars.ENV_NAME }}
      TTL: ${{ vars.TTL }}
      GOOGLE_PROJECT_ID: ${{ vars.GOOGLE_PROJECT_ID }}
      REGION: ${{ vars.REGION }}
      THRESHOLD: ${{ vars.THRESHOLD }}
      PUBSUB_TOPIC: ${{ vars.PUBSUB_TOPIC }}
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build with Docker Compose V2
        run: docker compose build  
     
      - name: list images
        run: docker images

      - name: Set up Cloud SDK
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }} 

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{vars.GOOGLE_PROJECT_ID}}
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Tag & Push to Artifact Registry
        run: |
          IMAGE="us-central1-docker.pkg.dev/${{ vars.GOOGLE_PROJECT_ID }}/sentiment/${{ vars.PROJECT_NAME }}:latest"
          docker tag ${{vars.PROJECT_NAME}}-app-${{vars.ENV_NAME}}:latest $IMAGE
          docker push $IMAGE

  build-worker-and-upload:
    runs-on: ubuntu-latest
    needs: test
    env:
      ARTIFACT_NAME: ${{ vars.PROJECT_NAME }}-artifact-${{ vars.ENV_NAME }}
      ARTIFACT_BUCKET_NAME: worker-function-artifacts
      REGION: ${{ vars.REGION }}
      ENV_NAME: ${{vars.ENV_NAME}}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm ci

      - name: Build NestJS App
        run: npm run build:worker

      - name: Copy package.json and prepare function
        run: |
          mkdir -p ./function
          cp -r dist/function.js ./function
          # copy package.json without scripts, devDependencies, or jest
          jq 'del(.scripts, .devDependencies, .jest)' package.json > ./function/package.json

      - name: Zip Function Code
        run: |
          cd function
          zip -r ../${ARTIFACT_NAME} .

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      - name: Upload to GCS
        uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: ${{ env.ARTIFACT_NAME }}.zip
          destination: ${{env.ARTIFACT_BUCKET_NAME}}/worker-${{env.ENV_NAME}}
          project_id: ${{vars.GOOGLE_PROJECT_ID}}
          gzip: false       

  terraform-validate:
    env:
      GOOGLE_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }} 
    defaults:
        run:
          working-directory: "infra/terraform/environments/${{vars.ENV_NAME}}"
    needs:
     - build-worker-and-upload 
     - build-app-and-push
    name: Terraform Init and Validate
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.0

      - name: Terraform Init
        run: terraform init
        
      - name: Terraform validate
        run: terraform validate

  terraform-plan:
    env:
      GOOGLE_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      TF_VAR_project_id: ${{vars.GOOGLE_PROJECT_ID}}
      TF_VAR_region: ${{vars.REGION}}
      TF_VAR_bucket_name: ${{vars.BUCKET_NAME}}
      TF_VAR_ssh_source_cidr: ${{secrets.ssh_source_cidr}}
    defaults:
      run:
        working-directory: "infra/terraform/environments/${{vars.ENV_NAME}}"
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-validate
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
           
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out=tfplan.binary    

  
  # deploy:
  #   needs: terraform-plan
  #   runs-on: ubuntu-latest
  #   name: Terraform apply
  #   env:
  #     GOOGLE_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
  #     TF_VAR_project_id: ${{vars.GOOGLE_PROJECT_ID}}
  #     TF_VAR_region: ${{vars.REGION}}
  #     TF_VAR_bucket_name: ${{vars.BUCKET_NAME}}
  #     TF_VAR_ssh_source_cidr: ${{secrets.ssh_source_cidr}}
  #   defaults:
  #     run:
  #       working-directory: "infra/terraform/environments/${{vars.ENV_NAME}}"
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
           
  #     - name: Install Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.12.0

  #     - name: Terraform Init
  #       run: terraform init
