name: Node CI

on:
  push:
    branches:
      - '**'

jobs:
  run-linters:
    name: Run linters
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: instal packages
        run: npm ci

      - name: run link
        run: npm run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: testing_db
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
    env:
      DB_NAME: testing_db
      DB_USERNAME: admin
      DB_PASSWORD: password
      DB_HOST: localhost
      DB_PORT: 5432
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      THRESHOLD: 0
      PUBSUB_TOPIC: summarization-completed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U admin; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done

      - name: Run database migrations
        run: npm run migration:run

      - name: Run tests
        run: npm run test

  terraform-validate:
    env:
      ENV_NAME: dev
    name: Terraform Init and Validate
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.0

      - name: Terraform Init
        run: terraform init
        working-directory: infra/terraform/environment/${{ env.ENV_NAME }}


      - name: Terraform validate
        run: terraform validate
        working-directory: infra/terraform/environment/${{ env.ENV_NAME }}


  build-app:
    environment: dav
    name: Build & Push to Google Container Registry
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ vars.GOOGLE_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: Configure Docker to use gcloud
        run: gcloud auth configure-docker

      - name: Build Docker image using docker-compose
        run: docker-compose build
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "${{ github.workspace }}/gcloud.json"
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      - name: print images
        run: docker images

      - name: Tag Docker image for GCR
        run: |
          docker tag "${{vars.PROJECT_NAME}}-app-${vars.ENV_NAME}" "gcr.io/${{ vars.GOOGLE_PROJECT_ID }}/${{vars.PROJECT_NAME}}-app-${vars.ENV_NAME}:latest"

      - name: Push Docker image to GCR
        run: docker push "gcr.io/${{ vars.GOOGLE_PROJECT_ID }}/${{vars.PROJECT_NAME}}-app-${vars.ENV_NAME}:latest"
  
  package_fn_artifact:
    environment: dav
    name: Build Worker Function and Push to GCS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    env:
      WORKER_APP_PATH: dist/apps/worker
      ARTIFACT_NAME: "${{vars.PROJECT_NAME}}-artifact-${{vars.ENV_NAME}}"
      BUCKET_NAME: ${{vars._PROJECT_NAME}}-bucket-${{vars.ENV_NAME}}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ vars.GOOGLE_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: Install dependencies
        run: npm install --production
        
      - name: Build worker app only
        run: npx tsc && rm -r dist/apps/sentiment-analyser

      - name: Prepare zip artifact
        run: |
          mkdir -p worker-artifact

          rsync -av \
            --exclude="/apps/\
            --exclude="infra" \
            --exclude="dist/apps/${{vars.PROJECT_NAME}}" \
            --exclude=".github/" \
            ./ worker-artifact/

          cd worker-artifact
          zip -r ../${{ env.ARTIFACT_NAME }} .
          cd ..

      - name: Upload zip to GCS
        run: |
          gsutil cp "${{ env.ARTIFACT_NAME }}.zip" gs://${{ env.BUCKET_NAME }}/"${{ env.ARTIFACT_NAME }}.zip"
